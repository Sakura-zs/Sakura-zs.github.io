<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>生活日常</title>
      <link href="/posts/3068.html"/>
      <url>/posts/3068.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="记录生活日常"><a href="#记录生活日常" class="headerlink" title="记录生活日常"></a>记录生活日常</h2><p>2020-09-13   15:32<br>一直怯于认识新的朋友，感觉没什么话题，如果是女生就显得更为尴尬。于是只在刚加了好友时聊了一会儿。<br>但是没有想到第三天她主动给我发消息，突然有点不一样。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用gitee和picgo自建图床</title>
      <link href="/posts/598c.html"/>
      <url>/posts/598c.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="为什么是gitee？"><a href="#为什么是gitee？" class="headerlink" title="为什么是gitee？"></a>为什么是gitee？</h2><p>网上所描述的图床大多数花钱如七牛云，又拍云等。而GitHub图床的加载速度又为人所诟病，所以使用gitee自建图床。gitee是国内代码托管网站，加载速度较快。</p><hr><h2 id="为什么是picgo"><a href="#为什么是picgo" class="headerlink" title="为什么是picgo"></a>为什么是picgo</h2><p>众所周知，博客是使用markdown（一种标记语言）所写，当插入图片时，如果将图片放在本地会拖慢加载速度，所以绝大多数博主会使用图床来存放图片，在使用时进行url引用。而手动将图片放在图床上是一个费心劳神的事情，所以<strong>picgo</strong>将代劳这件事。</p><hr><h2 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h2><ol><li><strong>下载Picgo</strong>，观看官方文档或者网上教程很容易安装，这里不加赘述。具体网址看<a href="https://picgo.github.io/PicGo-Doc/zh/guide/" target="_blank" rel="noopener">这里</a><br><br><br></li><li><strong>安装node.js</strong> ，因为下载picgo关于gitee的插件时需要使用npm进行安装，官网看<a href="https://nodejs.org/en/" target="_blank" rel="noopener">这里</a><br><br><br></li><li><strong>设置gitee作为Picgo图床</strong>，运行Picgo，单击插件设置，在搜索框中输入“gitee”，安装<em>gitee-uploader</em>，如图<br><img src="https://gitee.com/brillanza/picture/raw/master/img/20200526094044.png" alt="" loading="lazy">   </li></ol><p><strong>接下来将gitee选做上传图床，如图</strong><br><img src="https://gitee.com/brillanza/picture/raw/master/img/20200526094446.png" alt="" loading="lazy"><br><strong>或者</strong><br><img src="https://gitee.com/brillanza/picture/raw/master/img/20200526094540.png" alt="" loading="lazy"><br><br><br><br>4. <strong>gitee创建仓库和私人令牌</strong>，点击新建仓库，并且选择<strong>公开</strong>和<strong>使用readme初始化仓库</strong>，并且选择单分支(master)，点击创建。<br><br><br><br>接下来点击头像，设置，选择“私人令牌”，点击生成新令牌，如图选择权限<br><img src="https://gitee.com/brillanza/picture/raw/master/img/20200526095712.png" alt="" loading="lazy"></p><h1 id="一定要复制好生成的私人令牌，只出现一次！"><a href="#一定要复制好生成的私人令牌，只出现一次！" class="headerlink" title="一定要复制好生成的私人令牌，只出现一次！"></a>一定要复制好生成的私人令牌，只出现一次！</h1><ol start="5"><li><strong>配置Picgo</strong>，如图<br><img src="https://gitee.com/brillanza/picture/raw/master/img/20200526095940.png" alt="" loading="lazy"><br><img src="https://gitee.com/brillanza/picture/raw/master/img/20200526100049.png" alt="" loading="lazy"><br>填写刚刚创建的仓库信息，具体如下：<blockquote><p>repo:仓库名称 (前面是gitee用户名，后面是仓库名称)<br>branch:分支<br>token:刚刚复制好的私人令牌<br>path:仓库里存储图片的路径</p></blockquote></li></ol><p><br><br><br><br><br><br><strong>然后点击确定，就可以测试使用一下了！<br>如果出现错误，欢迎评论提问。</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图床 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划之最长公共子序列</title>
      <link href="/posts/b594.html"/>
      <url>/posts/b594.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h3 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h3><blockquote><p>给出两个字符串，求出这样的一个最长的公共子序列的长度：子序列中的每个字符都能在两个原串中找到，而且每个字符的先后顺序和原串中的先后顺序一致。   </p></blockquote><h3 id="范例输入："><a href="#范例输入：" class="headerlink" title="范例输入："></a>范例输入：</h3><blockquote><p>abcfbc  abfcab<br>programming  contest<br>abcd  mnp</p></blockquote><h3 id="范例输出："><a href="#范例输出：" class="headerlink" title="范例输出："></a>范例输出：</h3><blockquote><p>4<br>2<br>0   </p></blockquote><hr><p>示例代码：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> maxlen<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span> s1<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s2<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> s1 <span class="token operator">>></span> s2<span class="token punctuation">;</span>    <span class="token keyword">int</span> l1 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> l2 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l1<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        maxlen<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l2<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        maxlen<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> l1<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> l2<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s1<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> s2<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                maxlen<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> maxlen<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                maxlen<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>maxlen<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> maxlen<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> maxlen<span class="token punctuation">[</span>l1<span class="token punctuation">]</span><span class="token punctuation">[</span>l2<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>讲解：<br>1.</p><blockquote><p>设置maxlen数组来存放 <strong>s1以i-1为终点，s2以j-1为终点</strong> 的最长公共子序列的长度(maxlen[2][2]即表示s1[1]为终点，s2[1]为终点所对应的最长公共子序列的长度).   </p></blockquote><p>2.</p><blockquote><p>由以上maxlen数组的定义可以看出来，maxlen[i][0]均为0，maxlen[0][j]均为0.<br>我们以此为初始条件进行下一步的递推.   </p></blockquote><p>3.</p><blockquote><p>当s1[i-1]==s2[j-1]时，有maxlen[i][j]=maxlen[i-1][j-1]+1,这是易于理解的.   </p></blockquote><p>4.</p><blockquote><p>当s1[i-1]!=s2[j-1]时，有maxlen[i][j]=max(maxlen[i-1][j],maxlen[i][j-1]);此处不易理解，作以下解释：   </p><blockquote><p><strong>1.举一个栗子：</strong> 现在有 <em>abccfc</em> 与 <em>abcfba</em> 两个字符串，当我们求maxlen[4][4]时，也就是s1以f为终点，s2以b为终点的最长公共子序列的长度，很显然，f！=b，所以调用<em>maxlen[i][j]=max(maxlen[i-1][j],maxlen[i][j-1])</em><br>所以也就是求maxlen[3][4]与maxlen[4][3]的较大的那一个，而maxlen[4][3]为4，maxlen[3][4]为3，所以maxlen[4][4]为4.<br><strong>2.更加浅显的想</strong> ：maxlen[4][4]肯定不可能比maxlen[4][3]和maxlen[3][4]小，因为其中一个序列多了一个元素，自然不可能比短的串还要小.<br><strong>那么为什么不能都大于这两者呢？</strong><br>我们分开来讨论，如果maxlen[4][4]&gt;maxlen[4][3]，那么相比之下s2中新增加的那个元素一定是在最长子序列中的，且处于末尾。<br>另外如果maxlen[4][4]也同时大于maxlen[3][4]，那么同理s1中新增加的那个元素一定在最长子序列中，且处于末尾。<br>继续想，如果maxlen[4][4]同时满足以上两个条件，那么，一定会有s1新增的元素与s2新增的元素相等，这就与前提条件 <em>s1[i-1]!=s2[j-1]</em> 不相符.</p></blockquote></blockquote><p>最长公共子序列就完成啦！</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划之最长上升子序列</title>
      <link href="/posts/6ed5.html"/>
      <url>/posts/6ed5.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><blockquote><p>动态规划指的是将一个繁杂的问题分解成子问题之后，通过求解子问题的最优解，从而求得整体最优解。</p></blockquote><h2 id="最长上升子序列"><a href="#最长上升子序列" class="headerlink" title="最长上升子序列"></a>最长上升子序列</h2><h2 id="问题如下："><a href="#问题如下：" class="headerlink" title="问题如下："></a>问题如下：</h2><p>输入数据：</p><blockquote><p>输入的第一行是序列的长度N(1&lt;=N&lt;=1000),第一行给出序列的N个整数，这些整数的取值范围在0-10000.   </p></blockquote><p>输出要求：   </p><blockquote><p>最长上升子序列的长度。   </p></blockquote><p>输入样例：   </p><blockquote><p>7<br>1 7 3 5 9 4 8   </p></blockquote><p>输出样例：</p><blockquote><p>4</p></blockquote><p>范例代码：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token keyword">int</span> maxlen<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> s<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cin <span class="token operator">>></span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        maxlen<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                maxlen<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>maxlen<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> maxlen<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span><span class="token function">max_element</span><span class="token punctuation">(</span>maxlen <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> maxlen <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>讲解：   </p><ol><li><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> n<span class="token punctuation">;</span>cin <span class="token operator">>></span> n<span class="token punctuation">;</span><span class="token keyword">int</span> maxlen<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> s<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   cin <span class="token operator">>></span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>   maxlen<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这一部分是输入数据，并且让存储 <strong>以当前下标为终点的子序列的个数</strong> 的maxlen数组都初始化为1.   </p></blockquote></li></ol><hr><ol start="2"><li><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>       <span class="token punctuation">{</span>           maxlen<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>maxlen<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> maxlen<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这一部分是正式求解 以当前下标为终点的最长上升子序列 的长度，并且分别存储在maxlen数组内。<br>i每往后循环一次，j就要将i之前的数据都循环一遍。<br>当s[i]&gt;s[j]时就要求maxlen[j]+1与maxlen[i]之间的最大值进行maxlen[i]的更新。<br><strong>注</strong>：之所以需要每次都求maxlen[i]和maxlen[j]+1的最大值，而不直接将maxlen[j]+1赋值给maxlen[i]，是因为maxlen[i]之前的更新可能已经使maxlen[i]&gt;maxlen[[j]+1，故 此时maxlen[i]应保持不变。   </p></blockquote></li></ol><hr><ol start="3"><li>最后一部分为输出部分，调用max_element函数输出manlen数组内的最大值。<blockquote><p><strong>注</strong>：max_element函数返回值是一个指针<br>  max_element和max函数需要调用头文件algorithm</p></blockquote></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown插入代码语言类型</title>
      <link href="/posts/a199.html"/>
      <url>/posts/a199.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="markdown插入代码语言类型"><a href="#markdown插入代码语言类型" class="headerlink" title="markdown插入代码语言类型"></a>markdown插入代码语言类型</h2><blockquote><p>在使用markdown进行写文章时有时需要插入代码块，但是对于新手来说并不太清楚各种语言是怎样标记的，本文总结出来，如下：</p></blockquote><p><img src="https://note.youdao.com/yws/api/personal/file/WEB583495a583ffd25c16298963f95cafa1?method=download&amp;shareKey=716d44a599395858c970f48ec4812dd9" alt="" loading="lazy"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> markdown语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序算法</title>
      <link href="/posts/ef35.html"/>
      <url>/posts/ef35.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span>   </span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>   <span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> e<span class="token punctuation">,</span> <span class="token keyword">int</span> tmp<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> pb <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> p1 <span class="token operator">=</span> s<span class="token punctuation">,</span> p2 <span class="token operator">=</span> m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p1<span class="token operator">&lt;=</span>m<span class="token operator">&amp;&amp;</span>p2<span class="token operator">&lt;=</span>e<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>p1<span class="token punctuation">]</span> <span class="token operator">></span> a<span class="token punctuation">[</span>p2<span class="token punctuation">]</span><span class="token punctuation">)</span>            tmp<span class="token punctuation">[</span>pb<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>p2<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            tmp<span class="token punctuation">[</span>pb<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>p1<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p1<span class="token operator">&lt;=</span>m<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        tmp<span class="token punctuation">[</span>pb<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>p1<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p2<span class="token operator">&lt;=</span>e<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        tmp<span class="token punctuation">[</span>pb<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>p2<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> e<span class="token operator">-</span>s<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        a<span class="token punctuation">[</span>s<span class="token operator">+</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">mergesort</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> e<span class="token punctuation">,</span> <span class="token keyword">int</span> tmp<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">&lt;</span> e<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> s <span class="token operator">+</span> <span class="token punctuation">(</span>e <span class="token operator">-</span> s<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token function">mergesort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> s<span class="token punctuation">,</span> m<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">mergesort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> e<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">merge</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> s<span class="token punctuation">,</span> m<span class="token punctuation">,</span> e<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">mergesort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span>   </span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">quicksort</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">>=</span> e<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> a<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> s<span class="token punctuation">,</span> j <span class="token operator">=</span> e<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">!=</span>j<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">></span> i<span class="token operator">&amp;&amp;</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">>=</span> k<span class="token punctuation">)</span><span class="token operator">--</span>j<span class="token punctuation">;</span>        <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token operator">&amp;&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> k<span class="token punctuation">)</span><span class="token operator">++</span>i<span class="token punctuation">;</span>        <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">quicksort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> s<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">quicksort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cin <span class="token operator">>></span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">quicksort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于Intellij IDEA可运行但出现警告的解决方法</title>
      <link href="/posts/f99f.html"/>
      <url>/posts/f99f.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="为什么选择Intellij-IDEA"><a href="#为什么选择Intellij-IDEA" class="headerlink" title="为什么选择Intellij IDEA"></a>为什么选择Intellij IDEA</h4><p>初学Java，eclipse太老，个人倾向于Intellij IDEA，且Intellij IDEA功能更加多样化，还可用于Android的开发，所以使用</p><h4 id="出现的问题"><a href="#出现的问题" class="headerlink" title="出现的问题"></a>出现的问题</h4><p>配置Java环境网上教程很多，本文不做赘述<br>简要论述下个人运行时出现的问题   </p><ul><li>编译运行时可以正确输出，但是在目录上出现红色波浪线</li><li>编译的那个“小锤”旁边“main”出现小红叉，如图：<br><img src="https://note.youdao.com/yws/api/personal/file/WEB48e9a8ebd374ee5ea08b1e35a43b8aad?method=download&amp;shareKey=6c8cc2337794a7ee982cd99bd2a9ad00" alt="" loading="lazy"></li></ul><p><strong>解决办法：</strong><br>file –&gt; Project structure –&gt; 左侧点击SDKs –&gt; 将JDK home path的路径改成配置Java环境时使用的jdk路径即可<br>下面的path会自动配置，apply即可。 </p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Intellij IDEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++函数</title>
      <link href="/posts/f6d.html"/>
      <url>/posts/f6d.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h3 id="头文件-lt-ctype-gt"><a href="#头文件-lt-ctype-gt" class="headerlink" title="头文件<ctype>"></a><strong>头文件&lt;ctype&gt;</strong></h3><table><thead><tr><th>单字节</th><th>宽字节</th><th>描述</th></tr></thead><tbody><tr><td>isalnum</td><td>iswalnum</td><td>是否为数字字母</td></tr><tr><td>isalpha</td><td>iswalpha</td><td>是否为字母</td></tr><tr><td>islower</td><td>iswlower</td><td>是否为小写字母</td></tr><tr><td>isupper</td><td>iswupper</td><td>是否为大写字母</td></tr><tr><td>isdigit</td><td>iswdigit</td><td>是否为数字</td></tr><tr><td>isxdigit</td><td>iswxdigit</td><td>是否为16进制数字</td></tr><tr><td>ispunct</td><td>iswpunct</td><td>是否为标点</td></tr><tr><td>tolower</td><td>towlower</td><td>转换为小写</td></tr><tr><td>toupper</td><td>towupper</td><td>转换为大写</td></tr></tbody></table><hr><hr><h3 id="头文件-lt-stdio-h-gt"><a href="#头文件-lt-stdio-h-gt" class="headerlink" title="头文件<stdio.h>"></a><strong>头文件&lt;stdio.h&gt;</strong></h3><h4 id="sprintf-s-”abcd”-函数"><a href="#sprintf-s-”abcd”-函数" class="headerlink" title="sprintf(s,”abcd”)函数"></a>sprintf(s,”abcd”)函数</h4><blockquote><p>可以将字符串”abcd”输出到字符串s里</p></blockquote><hr><hr><h3 id="头文件-lt-algorithm-gt"><a href="#头文件-lt-algorithm-gt" class="headerlink" title="头文件<algorithm>"></a><strong>头文件&lt;algorithm&gt;</strong></h3><h4 id="find函数"><a href="#find函数" class="headerlink" title="find函数"></a>find函数</h4><pre class="line-numbers language-cpp"><code class="language-cpp">代码：<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> nums<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token function">find</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">-</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>输出：<span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="reverse-a-a-4-函数"><a href="#reverse-a-a-4-函数" class="headerlink" title="reverse(a,a+4);函数"></a>reverse(a,a+4);函数</h4><blockquote><p>可以将a到a+4之间的数进行反转</p></blockquote><pre class="line-numbers language-cpp"><code class="language-cpp">代码：    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">reverse</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>a<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>输出：<span class="token number">13</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">15</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>对于string字符串依然可使用</p></blockquote><pre class="line-numbers language-cpp"><code class="language-cpp">    string str <span class="token operator">=</span> <span class="token string">"abcdefghi"</span><span class="token punctuation">;</span>    <span class="token function">reverse</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span> str<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//对a[2]~a[5]逆转*左闭右开*</span>输出：abfedcghi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="cmp函数"><a href="#cmp函数" class="headerlink" title="cmp函数"></a>cmp函数</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token number">1</span><span class="token punctuation">.</span>对于<span class="token keyword">int</span>数组<span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">></span> b<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//可以理解为当a>b时把a放在b前面 </span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>a<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    输出a数组；<span class="token punctuation">}</span>输出：<span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token number">2</span><span class="token punctuation">.</span>对于<span class="token keyword">char</span>数组<span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">char</span> a<span class="token punctuation">,</span> <span class="token keyword">char</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">return</span> a <span class="token operator">></span> b<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//可以理解为当a>b时把a放在b前面 }</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>a<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    输出数组a；<span class="token punctuation">}</span>输出：d<span class="token punctuation">,</span>c<span class="token punctuation">,</span>b<span class="token punctuation">,</span>a<span class="token number">3</span><span class="token punctuation">.</span>对于结构体数组<span class="token keyword">struct</span> node｛    <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span>ssd<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span>node a<span class="token punctuation">,</span> node b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a<span class="token punctuation">.</span>x<span class="token operator">></span>b<span class="token punctuation">.</span>x<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ssd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>ssd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>    ssd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>ssd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>    ssd<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>ssd<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>ssd<span class="token punctuation">,</span> ssd<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    输出结构体数组的x成员；<span class="token punctuation">}</span>输出：<span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><hr><table><thead><tr><th>函数</th><th>作用</th><th>写法</th></tr></thead><tbody><tr><td>lower_bound</td><td>寻找数组或容器中(first,last)范围内第一个值大于等于val的元素位置，如果是数组则返回该位置的指针，容器则返回该位置的迭代器</td><td>lower_bound(first,last,val)</td></tr><tr><td>upper_bound</td><td>与上述相同，寻找<strong>大于</strong>的数</td><td>upper_bound(first,last,val)</td></tr><tr><td>count</td><td>可计算出在(first，last)范围内val出现的次数；</td><td>count(first,last,val)</td></tr><tr><td>all_of</td><td>所有数据都满足第三个参数所表示的函数则返回true，否则返回false；</td><td>all_of(s,s+10,[](int i){return i&gt;0;})</td></tr><tr><td>none_of</td><td>与上述函数相反</td><td>none_of(first,last,[](int i){return i&gt;0;})</td></tr><tr><td>any_of</td><td>在(开始，结束)这个范围，判断是否有一个元素满足fn函数；</td><td>any_of(first,last,[](int i){return i&gt;0;})</td></tr><tr><td>next_permutation</td><td>求出全排列的下一个排列</td><td>next_permutation(a,a+3);</td></tr><tr><td>fill</td><td>将数组前五位赋值位233</td><td>fill(a,a+5,233)</td></tr><tr><td>sort</td><td>将数组前五位排序</td><td>升序:sort(a,a+4,less<int>());   降序:sort(a,a+5,greater<int>())</int></int></td></tr><tr><td>equal</td><td>判断两范围是否相等</td><td>equal(a,a+10,s)</td></tr><tr><td>find</td><td>在范围内寻找val的位置</td><td>find(first,last,val)</td></tr><tr><td>find_if</td><td>返回第一个值满足给定条件的元素指针</td><td>find_if(s,s+5,[](int i){return i&gt;0;})</td></tr><tr><td>find_if_not</td><td>返回第一个不满足给定条件的元素指针</td><td>与上同</td></tr></tbody></table><hr><hr><h3 id="头文件-lt-cmath-gt"><a href="#头文件-lt-cmath-gt" class="headerlink" title="头文件<cmath>"></a><strong>头文件&lt;cmath&gt;</strong></h3><table><thead><tr><th>函数</th><th>作用</th><th>用法</th></tr></thead><tbody><tr><td>hypot</td><td>求三角形的斜边</td><td>hypot(double x,double y)</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android Studio关于控件的用法</title>
      <link href="/posts/3b5f.html"/>
      <url>/posts/3b5f.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h3 id="Android-Studio"><a href="#Android-Studio" class="headerlink" title="Android Studio"></a>Android Studio</h3><h4 id="imageview控件"><a href="#imageview控件" class="headerlink" title="imageview控件"></a>imageview控件</h4><p>1.src属性:控件内填充图片，值可以为纯色或者drawable内图片<br>2.scaleType属性:控件填充模式：</p><blockquote><p>(1)fitxy:通过拉伸使图片充满控件<br>(2)fitCenter:保持宽高比缩放，直至能够完全显示<br>(3)centerCrop：保持宽高比缩放，直至完全覆盖控件，裁剪显示</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android Studio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>孤芳自赏</title>
      <link href="/posts/3561.html"/>
      <url>/posts/3561.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h4 id="孤芳自赏"><a href="#孤芳自赏" class="headerlink" title="孤芳自赏"></a>孤芳自赏</h4><ul><li><p>学习是将偶然的几率慢慢的变大，最后成为必然。</p></li><li><p>原因是我只需要一个心理寄托，而你需要关心呵护，我不愿付出，你不愿迁就。很简单，也很难。</p></li><li><p>我想，应该是我喜欢你不够深，信心不够足，于是本就无缘的我们终是未能逆天改命。 </p></li><li><p>心甘情愿，很多事会变得简单。 </p></li><li><p>有故事的文章，朴素也罢，浓墨也罢;词藻华丽也罢，平实也罢，总有一位读者“懂”，是穿过文字，看透内心的“懂”。 </p></li><li><p>不必刻意的追逐和逃避，也许追逐着的不属于你，也许你逃避的并非寻你。 </p></li><li><p>所有的感觉，痛彻心扉也好，酣畅淋漓也好，悲痛欲绝也好，都是一种必须要经历的心情，享受它们，会有不一样的感觉。就像周五的时候，被一个女生开玩笑脸红心跳，却多了一分开心，或许我还年轻呐！ </p></li><li><p>语言真是一种无用的东西，花言巧语惹人心醉，真正的爱与悲痛却无法形容，终究是一种平时传递信息的东西，人类最深奥的秘密还是需要心与心的沟通。</p></li><li><p>有很多后悔都是很久以后才醒悟，骤然想起，去年冬天，他用一只手帮我遮蔽了风雪，我却没有说一句谢谢。</p></li><li><p>你可以等等我吗，一年而已啊。 </p></li><li><p>你已输了一半，但这不重要，若你耐得住寂寞，你将拥有全世界。</p></li><li><p>我希望，到时候走向战场时有荆轲刺秦王的悲壮，我希望战斗时有一刀流的决绝，还希望结束时有武士收刀入鞘的骄傲，我最希望，另一只手牵的是你。 </p></li><li><p>想了一晚上，该是有四种情况，兰州大学和你，兰州大学没有你，有你没有兰州大学，没有它也没有你。第一种可能只有0.1%，第二种可能有5%，第三种或许是0.5%，第四种…94.4%。如果是真的这样，我应该会一个人离开，或者是结束这失败的一生 </p></li><li><p>今天中午，不知道为什么心情真的很不好，可能是外面下雪造成的一身狼狈，可能是学习的压力，也许这就是我最后一次写了。 </p></li><li><p>从此故乡只有冬夏，再无春秋。 </p></li><li><p>要不荣归故里，要么客死他乡。 </p></li><li><p>下次见面，地点你约，高山流水，草原沙漠，只是请别在梦里。 </p></li><li><p>我犯了什么不可饶恕的罪，上帝你让我失败两次？对，我不会失败第三次，因为失败两次的人已经不配活着，是我不够好，打扰了。 </p></li><li><p>100年以后，这个世上没有你也没有我。 </p></li><li><p>我本可以忍受孤独，如果那颗心一直是独自一人。 </p></li><li><p>我要爱，或是死。</p></li><li><p>从此我们以后就是陌路人，QQ微信电话都删除，我怕我会忍不住打扰你，让你徒增烦恼，认识多年终抵不过一句我乐意，但是请允许我保存一张你的照片，作为最后生活的慰藉。 </p></li><li><p>‌突然觉得自己好可怕，那是你挚亲的人，你怎么可以对着他的笑脸就把书扔过去呢？他是爱你的啊！对不起。 </p></li><li><p>小眼睛，我好喜欢你啊。 </p></li><li><p>纵然你手眼通天，喜欢她到深入骨髓，但是世界就是这么奇妙，不可得终无可奈何。 </p></li><li><p>刚刚，我梦到你给我发了一句“我爱你”，就一刻钟而已，在恍惚间。 </p></li><li><p>你说你怎么没长成他喜欢的模样，我当时在想，我为什么没有长成你喜欢的模样？ </p></li><li><p>我写出了一篇令我自己满意的证明“读书有用论”的议论文，这也是我第一次觉得读书真无用，它弥补不了身世的差距，它缩短不了与我所喜欢的人之间的距离，它只能让我感慨自己心灵的修炼已臻至圆满，对物质不屑一顾，实像葡萄树下的狐狸一般，什么都不能给我带来。 </p></li><li><p>看完一篇穷酸书生与女友异地15年的恋情故事，绝大多数人感动的一塌糊涂，只有我，注意到  他是博士生… </p></li><li><p>你怎么越来越可爱呢？像个小孩一样。 可是我不能沮丧，还要大步向前，还有别的有趣的人，和他们可爱的表情、动作，我还要见证很多可爱，不辜负这双发现美的眼睛。</p></li><li><p>你在我的心里留下了去武汉的种子，后来，你不去了，我留在原地不知所措，像个傻子。 </p></li><li><p>仿佛拥有过一个这样的夜，可以抵抗此后的好多年。 </p></li><li><p>我就想使劲使劲往前跑，可是你已经安于原地踏步，我催你，你纹丝不动，并在朝夕相处中厌恶我贪得无厌的所谓进取心。 </p></li><li><p>你的背影有点亭亭玉立的感觉，马尾辫左右摇晃，真好看。 </p></li><li><p>我可以一蹶不振，我偏要一鸣惊人。 你的一连三个“不”，让我慌了神。</p></li><li><p>你，是我长这么大做的唯一一件有愧于内心的事。 </p></li><li><p>以为努力就可以得到想要的一切？不要太得意忘形啊，在这个赛场上努力是最不值得拿来夸口的东西，因为这只是基本，是人人都会做的，是最底层最渺小的东西，搞清楚这一点，再向高处攀登吧.</p></li><li><p>我多希望，这一刻，手机下的呼吸灯突然闪烁，我戳开屏幕，发现你回的一个“好”，是多么幸福。 </p></li><li><p>总以为自己坚如磐石，但不可否认的是我确实以想象中的一丝仅有的温存活着，自己欺骗自己，心酸、乏味，像得了癌症的人一样依靠药物来吊着命。</p></li><li><p>白雾茫茫，你是唯一一根若隐若现又患得患失的稻草，时而为你拼搏，时而又因为得不到你而颓废，想着如果每天能看到你的大学生活，那该有多美好。</p></li><li><p>如果不尽人意，也许我会找一个古香小镇，独自生活，就这样一直一直……</p></li><li><p>有一次，我在公交车上碰到了一个很像很像你的女孩，我坐在她后面望着她的背影好久，过了一会儿我睡着了，醒来却发现她已经下车，慌乱迷茫悲伤尽上心头，尽管我知道那并不是你。</p></li><li><p>我想和你一起去沙漠，管它那么多，上天安排的最大嘛。可是后来，上帝对我不是很友善，像他一样，像条狗一样。 </p></li><li><p>其实我也很爱这个世界啊。 </p></li><li><p>如果想得到的东西，想去的地方没有得到，没有去的话，读书或许是离她的心最近的地方。 </p></li><li><p>原来你并没有我想象的那么好，你也平凡而短见，毫无壮志，竟连诗意亦不存在，才17岁，一切就无可挽救的走向庸俗。 </p></li><li><p>扪心自问，你是否比他人聪明？亦或者你是否比他人努力？再或者你是否比他人拥有更好的资源？若此三者俱无，你凭什么和别人有一样的理想？或者对于你来说是“梦想”，想得到却不想付出，像爬虫一样令人恶心。 </p></li><li><p>今天，是我的生日，没有生日蛋糕，没有人和我说生日快乐，我一个人唱完了生日快乐歌，在凌晨0点寂寥无人的路上。 </p></li><li><p>想到你和我在同一座城市，就颇觉心安，我们还没分开，只是心安之余又在想，毕业后，又该如何？许是良辰好景虚设，便纵有千种风情 ，更与何人说？ </p></li><li><p>你迟到时看向我的那种不好意思的神情，最是可爱，但是为什么你要说很害怕我呢？我其实不是妖怪。</p></li><li><p>一次次的犯同一个错误，自以为是，他们和你不一样，你凭什么以你的要求苛刻别人？</p></li><li><p>你怎么就变成了这样？刻薄，势利，自私… </p></li><li><p>我喜欢你，所以你不用成为做乖宝宝才能拿到小红花的小孩，即使你耍小脾气，任性傲娇，爱说脏话，我也最最偏心你。</p></li><li><p>你为什么帮助我？ 其实… 其实什么？其实你喜欢我？ 不..不是 哦..原来你不喜欢我啊…. @$&amp;%^_^#*^ </p></li><li><p>纵使相逢应不识，尘满面，鬓如霜.</p></li><li><p>他可以考639，我，也要让我的名字留到那灿烂的荧幕上，来回滚动，看着一篇篇十字开头的少年因高考失常而自尽的报道，一下一下的击打在我的心上，我害怕查分后会撕心裂肺，我承受不了那样的后果，所以，拼命吧！如果我的梦想破灭……我要爱，或是死！ </p></li><li><p>你怎么那么可爱，奔跑自带尾翼，翻白眼时的眼睛都像月牙一样。 </p></li><li><p>从此，真心话大冒险我只选真心话。 </p></li><li><p>你笑起来真好看。</p></li><li><p>自从学校再添了新一届的学生后，我就再也没有在操场上偶遇过扎着辫子的你。</p></li><li><p>你其实不知道，我加上你微信时的开心，你其实不知道，我很久以前就注意你了。 </p></li><li><p>原来 在梦里就哭了的感觉，那么撕心裂肺。</p></li><li><p>十八岁的少年，你那么潇洒，纵身一跃，了却三千烦恼；十八岁的少年，你那么悲哀，你的刻骨铭心只是给别人留下的饭后谈资，在他们戏谑的说出来后，这世上便再无人记得你。</p></li><li><p>遇见你的欣喜，假装问题的戏，你和我打招呼时我淡淡的微笑，和一下午的甜，这算不算喜欢。</p></li><li><p>手机里有你的指纹，当我抓着手机的时候，一定意味着牵你的手。 </p></li><li><p>但问君故，沉吟至今 没想到你竟这么绝情，也没想到我竟有这么伤心。 </p></li><li><p>那年的今天开始，如今也在今天结束，到也算圆满。（11.27夜8:38） </p></li><li><p>记起初中时你我同桌，你被泼脏水时我没有站起阻拦，心颇觉愧疚，即便无关乎情感，无关乎喜欢，仅出于责任罢。我很懦弱，悔之！</p></li><li><p>我感悟到了对爱的人不说永远，只争朝夕，但我仍不敢表达，唯自言自语，书于心中。 </p></li><li><p>你怎么把那唯一的一张合照弄丢了啊！ </p></li><li><p>只想让你做我的猫。</p></li><li><p>凛冽的寒冬依旧存在，似乎永远不会被驱散. 夜很凉，很冷，深入骨髓的寒和灼烧皮囊的热汇聚在一起，我仿佛失去了才知道，我是有这么喜欢她.</p></li><li><p>本来我准备，等我去了南京，再给武汉的她发我给她写的日常，给她写的歌，然后删掉她，从她的生命里消失，葬送我的狗屎青春。</p></li><li><p>你怎么变这样？</p></li><li><p>城内如坐针毡，城外望洋兴叹。他们藏在漆黑一片的地下室里，偶尔偷偷的向外望了一眼，发现外面都是妖魔鬼怪，只好又灰溜溜的坐了回来。</p></li><li><p>“死去元知万事空，但悲不见九州同。王师北定中原日，家祭无忘告乃翁。”</p></li><li><p>从此无心下良夜，任他明月下西楼。</p></li><li><p>“少年的肩膀，就应该这样嘛，什么家国仇恨，浩然正气的，都不要急，先挑起清风明月、杨柳依依和草长莺飞，少年郎的肩膀，本应当满是美好的事物啊”</p></li><li><p>“在你长大之后，发现最令你难过的事情是什么？”<br> “呃，我有一个朋友….”<br> “从前他走路带风，行事高调张扬，笑起来眼角眉梢都是那肆意的潇洒。”<br> “怎么说呢？他放纵不羁，意在九天采摘星辰，桀骜难驯，策马看尽长安花。”<br> “那，后来呢？”<br> “后来…..他行路不敢再逆着人潮，为人处世处处谨小慎微，不再有放肆的开怀，也不再有凌云的少年意气….”<br> “最难过的，也就是这样了。岁月悠长，山河无恙。但你我不再复当年模样”</p></li><li><p>你真的一点都不注重细节，毁了我好多温柔。</p></li><li><p>慢热的人真可怕，<br>读不懂言外之意 明不了你的心<br>不轻信  而却会将你的好一直记在心里<br>不会将主动招惹放在心上<br>可时间久了就会产生依赖<br>连喜欢都是后知后觉<br>就好似你玩腻了  我才开始上心   </p></li><li><p>等疫情过去了我一定要抱抱你。</p></li><li><p>即使辛苦，我还是选择去过滚烫的人生。</p></li><li><p>那些看似不起波澜的日复一日，会在某天让你看到坚持的意义。   </p></li><li><p>如果我爱你，而你也正巧爱我。 你头发乱了的时候，我会笑着替你拨一拨，然后，手还留恋地在你发上多待几秒。但是，如果我爱你，而你不巧地不爱我。你头发乱了的时候，我只能轻轻地告诉你：“你头发乱了喔。”</p></li><li><p>“我之前没有爱过别人，你是第一个，我怕我做的不好让你觉得爱情不过如此。”</p></li><li><p><strong>没有人关心你快不快乐，所有人都看你有没有用。</strong><br><img src="https://gitee.com/brillanza/picture/raw/master/img/1589258989356.jpeg" alt="" loading="lazy"></p></li><li><p>当坊间最善歌舞的女儿死了，这京城就该有一场大雪。</p></li><li><p>我和喜欢的男生聊天，他说不聊了我先吃饭了。<br>我一怔，因为自己正一边打字，一边趁他回复的间隙胡乱吃口饭。<br>那时候才觉得自己方寸大乱。<br>他不过是在有条不紊的出现空挡的时候，和我打发无聊罢了。<br>而我给她全部的时间，抽空才生活。</p></li><li><p>“你也许不知道，你在路边随意擦肩而过的少年，都是哪家姑娘朝思暮想的心上人”</p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 个人 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019年度总结</title>
      <link href="/posts/c473.html"/>
      <url>/posts/c473.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><div id="aplayer-jRRexLQk" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="506942692" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#C20C0C"></div><h3 id="2019前半年"><a href="#2019前半年" class="headerlink" title="2019前半年"></a>2019前半年</h3><p>   人总是不免俗，要说一句“2019如白驹过隙，眨眼而逝”，<br>   犹记得在夏天炽热的教室里迷茫与苦累中匍匐前行，<br>   听着“青鸟与诗”，我们向往着远方，向往着诗意，<br>   还记得一句话“我们诗意地栖居在大地上”。<br>   那段日子，永远让人热泪盈眶，<br>   精神衰弱，总是被很小的动静惊醒，<br>   似乎不想起考试它就不会来。<br>   但是六月如期而至，<br>   转眼间进了考场，中午空气中的热浪，永远不会忘记。<br>   考完之后，没有撕书，没有痛痛快快的与老友拥抱一下，<br>   没有仰天大笑，没有释放压力的痛苦，简简单单的回去了，<br>   就再也没有和同学们见过面。<br>   那时我想着我离开家乡时，<br>   一定要发朋友圈：<br>   从此故乡只有冬夏，再无春秋。<br>   谁曾想竟不如意…</p><h3 id="2019后半年"><a href="#2019后半年" class="headerlink" title="2019后半年"></a>2019后半年</h3><p>   考完试可以痛快玩手机，问你近况，<br>   渐渐的联系，竟喜欢了你，<br>   上大学总是让人充满了向往，憧憬着校门口的偶遇，<br>   憧憬着收获室友的友谊，那时候的我们是理想的，<br>   身边的同学们蠢蠢欲动，荷尔蒙刺激着少年们以友谊的名义打着自己的小算盘，<br>   我总觉得自己作为一个旁观者，看破一切，<br>   却在无意中着相。<br>   现实狠狠的扇了少年们一巴掌，让他们尝够了失败，<br>   于是少年们有的如坐针毡，有的望洋兴叹，<br>   藏在漆黑一片的地下室里，偶尔偷偷的向外望了一眼，<br>   发现外面全是妖魔鬼怪，<br>   只好灰溜溜的坐了回来。<br>   终是无可奈何，回归了现实。</p><p>   不知不觉，已经过去，<br>   到底意难平。<br>   像平淡日子里的一根刺，<br>   夜半刺痛，无可奈何。</p><h3 id="终"><a href="#终" class="headerlink" title="终"></a>终</h3><p>   <strong>2019已然如此，</strong><br>   <strong>2020切不可拖沓。</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 个人 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
